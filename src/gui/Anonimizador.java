package gui;

import com.csvreader.CsvReader;
import com.csvreader.CsvWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultTreeModel;
import org.supercsv.io.CsvMapReader;
import org.supercsv.io.ICsvMapReader;
import org.supercsv.prefs.CsvPreference;
import weka.clusterers.SimpleKMeans;
import weka.core.Instances;
import weka.core.converters.ConverterUtils;
import util.TaxoTree;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 * @class Anonimizador used to run the project
 */
public class Anonimizador extends javax.swing.JFrame {

    /**
     * The Constructor of the GUI - Creates a new form
     */
    public Anonimizador() {
        tableModel = new DefaultTableModel(data, columnNames);
        treeModel = new DefaultTreeModel(null);
        try {
            // Set cross-platform Java L&F (also called "Metal")
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (UnsupportedLookAndFeelException | ClassNotFoundException | InstantiationException | IllegalAccessException e) {
            // handle exception
        }
        
        initComponents();
        jTabbedPane1.setVisible(false);
        jButton5.setVisible(false);
        jPanel1.setVisible(false);
    }

    public ICsvMapReader mapReader;
    public FileReader fReader;
    public Vector<String> columnNames;
    public Vector<Vector<Object>> data;
    public DefaultTableModel tableModel;
    public DefaultTreeModel treeModel;
    public String[] headers;
    public String[] arrayOfX;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jButton5 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        Open = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        jFileChooser1.setDialogTitle("Este es mi dialogo abierto");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(649, 650));

        jLabel1.setText("Texto Cargado");

        jScrollPane3.setBackground(new java.awt.Color(100, 100, 100));

        jTable2.setModel(tableModel);
        jTable2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane3.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 419, Short.MAX_VALUE)
                .addContainerGap())
        );

        jScrollPane1.setMinimumSize(new java.awt.Dimension(100, 20));

        jTree1.setModel(treeModel);
        jScrollPane1.setViewportView(jTree1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 746, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );

        jTabbedPane1.addTab("Arbol de Taxonomia", jPanel3);

        jButton5.setText("Boton Entrega II");

        Open.setText("Archivo");

        jMenuItem1.setText("Abrir");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        Open.add(jMenuItem1);

        jMenuItem2.setText("Salir");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        Open.add(jMenuItem2);

        jMenuBar1.add(Open);

        jMenu2.setText("Editar");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(311, 311, 311)
                .addComponent(jButton5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTabbedPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton5)
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        File workingDirectory = new File(System.getProperty("user.dir"));
        jFileChooser1.setCurrentDirectory(workingDirectory);
        jFileChooser1.setFileFilter(new CSVFileFilter());
        int returnVal = jFileChooser1.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = jFileChooser1.getSelectedFile();

            try {

                // place the document to the fReader
                fReader = new FileReader(file.getAbsolutePath());

                //Filling the table with CSV data
                mapReader = new CsvMapReader(fReader, CsvPreference.EXCEL_PREFERENCE);
                new SwingWorker<Void, Void>() {
                    @Override
                    protected Void doInBackground() throws Exception {
                        loadData();
                        return null;
                    }
                }.execute();

            } catch (IOException ex) {
                System.out.println("Problem accessing the file: " + file.getAbsolutePath());
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * This method load the Data that comes from the initial loaded CSV file
     *
     * @Author Camilo Benavides
     */
    private void loadData() throws IOException {

        jTabbedPane1.setVisible(false);
        jPanel1.setVisible(false);
        try {
            headers = mapReader.getHeader(true);

            // Names of columns
            columnNames = new Vector<String>();
            for (String header : headers) {
                columnNames.add(header);
            }

            // Data of the table
            data = new Vector<Vector<Object>>();
            Map<String, String> row;
            while ((row = mapReader.read(headers)) != null) {
                Vector<Object> vector = new Vector<Object>();
                for (String header : headers) {
                    vector.add(row.get(header));
                }
                data.add(vector);
            }

            // Filling the TableModel
            tableModel.setDataVector(data, columnNames);
            jTabbedPane1.setVisible(true);
            jPanel1.setVisible(true);
        } finally {
            //mapReader.close();
        }

    }

    /**
     * This method is in charge of executing the filter one - Number identifier
     * of different values
     *
     * @param dataFilterOne Listing with comma-separated quasi-identifier
     * identifiers
     * @Author Camilo Benavides
     */
    private void filterOne(String dataFilterOne) {

        if (!dataFilterOne.equals("")) {

            System.out.println("The parameters for the first filter are NOT empty");

            String cuasiID = dataFilterOne;

            StringTokenizer st = new StringTokenizer(cuasiID, ",");

            try {
                filterOneProcedure(st);
                tableModel.fireTableDataChanged();
            } catch (IOException ex) {
                Logger.getLogger(Anonimizador.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {

            System.out.println("The parameters for the first filter are empty");
        }

    }

    /**
     * This method is in charge of executing the filter two - Generalizer based
     * on taxonomy
     *
     * @param dataFilterTwo The Nominal Attributes
     * @param dataFilterTwoI Nominal attribute to generalize
     * @param dataFilterTwoII Level of generalization
     * @param dataFilterTwoIII Taxonomy document
     * @Author David Villamizar
     */
    private void filterTwo(String dataFilterTwo, String dataFilterTwoI, String dataFilterTwoII, String dataFilterTwoIII) {

        TaxoTree<String> t = parseTaxonomyFile(dataFilterTwoIII);
        treeModel.setRoot(t);
        String indexStr = dataFilterTwoI;

        if (indexStr.isEmpty()) {
            System.out.println("Debe ponerse el índice del atribtuo a generalizar.");
            return;
        }

        int index;

        try {
            index = Integer.parseInt(indexStr);
        } catch (NumberFormatException e) {
            Logger.getLogger(Anonimizador.class.getName()).log(Level.ALL, null, e);
            System.out.println("El índice del atributo a generalizar debe ser numérico.");
            return;
        }

        String nIndicesStr = dataFilterTwo;
        List<Integer> nIndices = new ArrayList<>();
        StringTokenizer st = new StringTokenizer(nIndicesStr, ",");
        try {
            while (st.hasMoreTokens()) {
                nIndices.add(Integer.parseInt(st.nextToken()));
            }
        } catch (NumberFormatException e) {

            Logger.getLogger(Anonimizador.class.getName()).log(Level.ALL, null, e);
            System.out.println("Los índices de los atributos nominales deben ser numéricos.");
            return;
        }

        for (int i = 0; i < nIndices.size(); ++i) {
            if (nIndices.get(i) < 0 || nIndices.get(i) >= tableModel.getColumnCount()) {
                System.out.println("Los índices de los atributos nominales están fuera de rango.");
                return;
            }
        }

        if (index < 0 || index >= tableModel.getColumnCount()) {
            System.out.println("El índice del atributo nominal a generalizar está fuera de rango.");
            return;
        }

        if (!nIndices.contains(index)) {
            System.out.println("El atributo a generalizar debe ser nominal.");
            return;
        }

        String levelStr = dataFilterTwoII;
        if (levelStr.isEmpty()) {
            System.out.println("Debe ponerse el nivel hasta el que se quiere generalizar.");
            return;
        }

        int level;

        try {
            level = Integer.parseInt(levelStr);
        } catch (NumberFormatException e) {
            Logger.getLogger(Anonimizador.class.getName()).log(Level.ALL, null, e);
            System.out.println("El nivel hasta el que se quiere generalizar debe ser numérico.");
            return;
        }

        if (level < 0 || level >= t.getHeight()) {
            System.out.println("El nivel hasta el que se quiere generalizar está fuera de rango.");
            return;
        }

        System.out.println(t.getHeight());

        for (int i = 0; i < tableModel.getRowCount(); ++i) {
            String val = (String) tableModel.getValueAt(i, index);
            TaxoTree<String> valT = t.find(val);
            if (valT == null) {
                System.out.println("El atributo seleccionado no corresponde con la taxonomía dada.");
                return;
            }
            int h = valT.getHeight() - 1;
            if (h < level) {
                val = valT.getParentAtHeight(level + 1).getData();
                tableModel.setValueAt(val, i, index);
                System.out.println("val: " + val);
            }
        }
        generateCSV(-1, "ioFiles/filter2.csv");
    }

    /**
     * This method is in charge of executing the filter three - Generalizer
     * based on replacement of values by *
     *
     * @param dataFilterThree Listing with the identifier attribute and number
     * of digits to replace
     * @Author Camilo Benavides
     */
    private void filterThree(String dataFilterThree) {
        if (!dataFilterThree.equals("")) {

            System.out.println("The parameters for the third filter are NOT empty");

            String params = dataFilterThree;

            StringTokenizer st = new StringTokenizer(params, ",");

            int col = filterThreeProcedure(st);
            generateCSV(col, "ioFiles/filter3.csv");
            tableModel.fireTableDataChanged();

        } else {

            System.out.println("The parameters for the third filter are empty");
        }
    }

    /**
     * This method is in charge of executing the filter four - Generator based
     * on micro-aggregation using clustering
     *
     * @param dataFilterFour The quasi-identifier identifiers
     * @param dataFilterFourI Number of Clusters
     * @Author Jhonan Espejo
     */
    private void filterFour(String dataFilterFour, String dataFilterFourI) {

        if (!dataFilterFour.equals("") && !dataFilterFourI.equals("")) {

            System.out.println("The parameters for the fourth filter are NOT empty");

            List<String> clustering = new ArrayList<String>();
            String str = dataFilterFour;
            StringTokenizer st = new StringTokenizer(str, ",");

            while (st.hasMoreElements()) {
                clustering.add(st.nextElement().toString());
            }

            try {
                filterFourProcedure(clustering, "ioFiles/filter4.csv", Integer.parseInt(dataFilterFourI));
            } catch (Exception ex) {

                Logger.getLogger(Anonimizador.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {

            System.out.println("The parameters for the fourth filter are empty");
        }

    }

    /**
     * This method is in charge of executing the filter five - Delete all values
     * of an attribute
     *
     * @param dataFilterFive identifier attribute
     * @Author Cristian Lozano
     */
    private void filterFive(String dataFilterFive) {

        if (!dataFilterFive.equals("")) {

            System.out.println("The parameters for the fifth filter are NOT empty");
            String cuasiID = dataFilterFive;
            int numID = Integer.parseInt(cuasiID);

            for (int i = 0; i < data.size(); i++) {

                data.get(i).set(numID, "");

            }

            tableModel.fireTableDataChanged();
            generateCSV(-1, "ioFiles/filter5.csv");

        } else {

            System.out.println("The parameters for the fifth filter are empty");

        }

    }

    /**
     * This method contains all the logic of the filter one
     *
     * @param st Tokenized quasi-identifier identifiers
     * @Author Camilo Benavides
     */
    private void filterOneProcedure(StringTokenizer st) throws IOException {

        List<Integer> myList = new ArrayList<Integer>();
        int contador = 0;
        int acumulado = 0;

        // Filling a list with the tokens
        while (st.hasMoreElements()) {
            myList.add(Integer.valueOf(st.nextToken()));
        }

        // Print to verify that the correct columns name were taken
        for (Integer cuasID : myList) {
            System.out.printf("%-5s,", tableModel.getColumnName(cuasID));
            contador++;
        }

        // Generate the set result for each column - Optional point (not required for the task)
        try {
            PrintWriter writer = new PrintWriter("ioFiles/filterOne-OptionalResult.txt", "UTF-8");
            writer.println("");
            for (int i = 0; i < tableModel.getRowCount(); i++) {
                for (int j = 0; j < tableModel.getColumnCount(); j++) {
                    for (Integer cuasID : myList) {

                        if (j == cuasID) {
                            if (acumulado == myList.size() - 1) {
                                writer.printf("%2d: %2s", acumulado + 1, tableModel.getValueAt(i, cuasID));
                                acumulado++;
                            } else {
                                writer.printf("%2d: %2s,", acumulado + 1, tableModel.getValueAt(i, cuasID));
                                acumulado++;
                            }
                        }
                        if (acumulado == contador) {
                            writer.println("");
                            acumulado = 0;
                        }
                    }
                }
            }
            writer.close();
        } catch (IOException e) {
            System.out.println("There was a problem while trying to generate the results");
        }

        List<Object> dataPerColumn = new ArrayList<Object>();
        List<Integer> countSet = new ArrayList<Integer>();

        //Walktrhoug of the colunm to count the repetitions
        for (Integer cuasID : myList) {
            for (int i = 0; i < tableModel.getColumnCount(); i++) {
                if (i == cuasID) {
                    for (int j = 0; j < tableModel.getRowCount(); j++) {
                        dataPerColumn.add(tableModel.getValueAt(j, i));
                        acumulado++;
                    }
                    int difVal = diffValues(dataPerColumn);
                    dataPerColumn.clear();
                    countSet.add(difVal);
                }
            }
        }

        // Creating the fliter one - printing the .TXT
        try {
            PrintWriter writer = new PrintWriter("ioFiles/filter1.txt", "UTF-8");

            for (int j = 0; j < myList.size(); j++) {
                for (int i = 0; i < countSet.size(); i++) {
                    if (i == j) {
                        if (j == myList.size() - 1) {
                            writer.printf("%2d: %2d", myList.get(j), countSet.get(i));
                        } else {
                            writer.printf("%2d: %2d,", myList.get(j), countSet.get(i));
                        }
                    }
                }
            }

            writer.close();
        } catch (IOException e) {
            System.out.println("There was a problem while trying to generate the results");
        }

    }

    /**
     * This method contains all the logic of the filter three
     *
     * @param st Tokenized identifier attribute and number of digits to replace
     * @Author Camilo Benavides
     */
    private int filterThreeProcedure(StringTokenizer st) {

        List<Integer> myList = new ArrayList<Integer>();
        int contador = 0;
        int acumulado = 0;

        // Filling a list with the tokens
        while (st.hasMoreElements()) {
            myList.add(Integer.valueOf(st.nextToken()));
        }

        int att = myList.get(0);
        int numToBeReplaced = myList.get(1);
        String dato = "";

        //Allocating memory for the array that will contain the replacements
        arrayOfX = new String[tableModel.getRowCount()];

        //Generating the replacements with *
        for (int j = 0; j < tableModel.getColumnCount(); j++) {
            if (j == att) {
                for (int i = 0; i < tableModel.getRowCount(); i++) {

                    dato = String.valueOf(tableModel.getValueAt(i, j));
                    arrayOfX[i] = replaceWithX(dato, numToBeReplaced);
                }
            }
        }
        return att;
    }

    /**
     * This method contains all the logic of the filter four
     *
     * @param cuasi The quasi-identifier identifiers
     * @param name The name of the output CSV
     * @param nCl The number of Clusters
     * @throws java.lang.Exception
     * @Author Camilo Benavides
     */
    public void filterFourProcedure(List<String> cuasi, String name, int nCl) throws Exception {

        SimpleKMeans kmeans = new SimpleKMeans();
        kmeans.setSeed(10);

        kmeans.setPreserveInstancesOrder(true);
        kmeans.setNumClusters(nCl);

        ConverterUtils.DataSource source = new ConverterUtils.DataSource("ioFiles/yourfile.csv");
        Instances data = source.getDataSet();

        kmeans.buildClusterer(data);

        int[] assignments = kmeans.getAssignments();

        int i = 0;
        Instances centroids = kmeans.getClusterCentroids();
        String outputFile = name;
        boolean alreadyExists = new File(outputFile).exists();

        if (alreadyExists) {
            File ficheroPunto4 = new File(outputFile);
            ficheroPunto4.delete();
        }
        CsvWriter csvOutput = new CsvWriter(new FileWriter(outputFile, true), ',');
        csvOutput.write("CustomerKey");
        csvOutput.write("GeographyKey");
        csvOutput.write("FirstName");
        csvOutput.write("MiddleName");
        csvOutput.write("LastName");
        csvOutput.write("BirthDate");
        csvOutput.write("MaritalStatus");
        csvOutput.write("Gender");
        csvOutput.write("EmailAddress");
        csvOutput.write("YearlyIncome");
        csvOutput.write("TotalChildren");
        csvOutput.write("NumberChildrenAtHome");
        csvOutput.write("EnglishEducation");
        csvOutput.write("EnglishOccupation");
        csvOutput.write("HouseOwnerFlag");
        csvOutput.write("NumberCarsOwned");
        csvOutput.write("DateFirstPurchase");
        csvOutput.write("CommuteDistance");
        csvOutput.write("Region");
        csvOutput.write("Age ");
        csvOutput.write("BikeBuyer ");
        csvOutput.endRecord();

        CsvReader csv_import = new CsvReader("ioFiles/yourfile.csv");
        csv_import.readHeaders();
        while (csv_import.readRecord()) {
            if (esta(cuasi, "CustomerKey")) {
                csvOutput.write((centroids.instance(assignments[i])).toString(0));
            } else {
                csvOutput.write(csv_import.get(0));
            }
            if (esta(cuasi, "GeographyKey")) {
                csvOutput.write((centroids.instance(assignments[i])).toString(1));
            } else {
                csvOutput.write(csv_import.get(1));
            }
            if (esta(cuasi, "FirstName")) {
                csvOutput.write((centroids.instance(assignments[i])).toString(2));
            } else {
                csvOutput.write(csv_import.get(2));
            }
            if (esta(cuasi, "MiddleName")) {
                csvOutput.write((centroids.instance(assignments[i])).toString(3));
            } else {
                csvOutput.write(csv_import.get(3));
            }
            if (esta(cuasi, "LastName")) {
                csvOutput.write((centroids.instance(assignments[i])).toString(4));
            } else {
                csvOutput.write(csv_import.get(4));
            }
            if (esta(cuasi, "BirthDate")) {
                csvOutput.write((centroids.instance(assignments[i])).toString(5));
            } else {
                csvOutput.write(csv_import.get(5));
            }
            if (esta(cuasi, "MaritalStatus")) {
                csvOutput.write((centroids.instance(assignments[i])).toString(6));
            } else {
                csvOutput.write(csv_import.get(6));
            }
            if (esta(cuasi, "Gender")) {
                csvOutput.write((centroids.instance(assignments[i])).toString(7));
            } else {
                csvOutput.write(csv_import.get(7));
            }
            if (esta(cuasi, "EmailAddress")) {
                csvOutput.write((centroids.instance(assignments[i])).toString(8));
            } else {
                csvOutput.write(csv_import.get(8));
            }
            if (esta(cuasi, "YearlyIncome")) {
                csvOutput.write((centroids.instance(assignments[i])).toString(9));
            } else {
                csvOutput.write(csv_import.get(9));
            }
            if (esta(cuasi, "TotalChildren")) {
                csvOutput.write((centroids.instance(assignments[i])).toString(10));
            } else {
                csvOutput.write(csv_import.get(10));
            }
            if (esta(cuasi, "NumberChildrenAtHome")) {
                csvOutput.write((centroids.instance(assignments[i])).toString(11));
            } else {
                csvOutput.write(csv_import.get(11));
            }
            if (esta(cuasi, "EnglishEducation")) {
                csvOutput.write((centroids.instance(assignments[i])).toString(12));
            } else {
                csvOutput.write(csv_import.get(12));
            }
            if (esta(cuasi, "EnglishOccupation")) {
                csvOutput.write((centroids.instance(assignments[i])).toString(13));
            } else {
                csvOutput.write(csv_import.get(13));
            }
            if (esta(cuasi, "HouseOwnerFlag")) {
                csvOutput.write((centroids.instance(assignments[i])).toString(14));
            } else {
                csvOutput.write(csv_import.get(14));
            }
            if (esta(cuasi, "NumberCarsOwned")) {
                csvOutput.write((centroids.instance(assignments[i])).toString(15));
            } else {
                csvOutput.write(csv_import.get(15));
            }
            if (esta(cuasi, "DateFirstPurchase")) {
                csvOutput.write((centroids.instance(assignments[i])).toString(16));
            } else {
                csvOutput.write(csv_import.get(16));
            }
            if (esta(cuasi, "CommuteDistance")) {
                csvOutput.write((centroids.instance(assignments[i])).toString(17));
            } else {
                csvOutput.write(csv_import.get(17));
            }
            if (esta(cuasi, "Region")) {
                csvOutput.write((centroids.instance(assignments[i])).toString(18));
            } else {
                csvOutput.write(csv_import.get(18));
            }
            if (esta(cuasi, "Age ")) {
                csvOutput.write((centroids.instance(assignments[i])).toString(19));
            } else {
                csvOutput.write(csv_import.get(19));
            }
            if (esta(cuasi, "BikeBuyer ")) {
                csvOutput.write((centroids.instance(assignments[i])).toString(20));
            } else {
                csvOutput.write(csv_import.get(20));
            }

            csvOutput.endRecord();
            i++;
        }

        csv_import.close();

    }

    /**
     * This method contains all the logic to generate output CSV files
     *
     * @param colunm the column that was modified
     * @param filePath the name of the output CSV
     * @Author Camilo Benavides
     */
    private void generateCSV(int colunm, String filePath) {

        try {
            PrintWriter writer = new PrintWriter(filePath, "UTF-8");

            //Print the headers on the new CSV
            for (int j = 0; j < tableModel.getColumnCount(); j++) {
                if (j != tableModel.getColumnCount() - 1) {
                    writer.printf(tableModel.getColumnName(j) + ",");
                } else {
                    writer.printf(tableModel.getColumnName(j) + "");
                    writer.println("");
                }
            }

            //Print the data of the new CSV, with transformations
            for (int i = 0; i < tableModel.getRowCount(); i++) {
                for (int j = 0; j < tableModel.getColumnCount(); j++) {
                    if (j == colunm) {
                        if (j != tableModel.getColumnCount() - 1) {
                            writer.printf(arrayOfX[i] + ",");
                        } else {
                            writer.printf(arrayOfX[i] + "");
                            writer.println("");
                        }
                    } else {
                        if (j != tableModel.getColumnCount() - 1) {
                            writer.printf(tableModel.getValueAt(i, j) + ",");
                        } else {
                            writer.printf(tableModel.getValueAt(i, j) + "");
                            writer.println("");
                        }
                    }
                }
            }

            writer.close();
        } catch (IOException e) {
            System.out.println("There was a problem while trying to generate the results");
        }

    }

    /**
     * This method contains all the logic for parsing the Taxonomy File
     *
     * @param filePath the path of the Taxonomy File
     * @return 
     * @Author David Villamizar
     */
    public TaxoTree<String> parseTaxonomyFile(String filePath) {
        TaxoTree<String> t = new TaxoTree<>("Root");
        List<String> lines;
        try {
            lines = Files.readAllLines(new File(filePath).toPath());
            for (int i = 0; i < lines.size(); ++i) {
                String line = lines.get(i);
                if (line.charAt(0) != '\t') {
                    List<String> lineage = new ArrayList<>();
                    TaxoTree<String> t1 = new TaxoTree<>();
                    lineage.add(line);
                    int j = 1;
                    for (; j + i < lines.size() && lines.get(i + j).charAt(0) == '\t'; ++j) {
                        lineage.add(lines.get(i + j).substring(j, lines.get(i + j).length()));
                    }
                    i += j - 1;
                    t1.buildFromLineage(lineage);
                    t.addChild(t1);
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(Anonimizador.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Error leyendo el archivo.");
            return null;
        }
        return t;
    }

    /**
     * This method contains all the logic for parsing the Taxonomy File
     *
     * @param cuasi The quasi-identifier identifiers
     * @param identificador the column name (identifier)
     * @return a boolean that check if the element exist or not
     * @Author Jhonan Espejo
     */
    public static boolean esta(List<String> cuasi, String identificador) {
        for (String p : cuasi) {
            if (p.trim().equalsIgnoreCase(identificador.trim())) {
                return true;
            }
        }
        return false;
    }


    /* ------------------ MAIN ------------------ */
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Anonimizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Anonimizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Anonimizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Anonimizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Anonimizador().setVisible(true);

            }
        });
    }


    /* ------------------ Utility Methods Declaration ------------------ */
    /**
     * This method contains all the logic used to replace with ***
     *
     * @param att the attribute that will be replaced with
     * @param numToBeReplaced how many * are needed to be put
     */
    private String replaceWithX(String att, int numToBeReplaced) {

        int cont = 0;
        char[] buff = att.toCharArray();

        if (numToBeReplaced <= att.length()) {

            for (int i = att.length(); cont < numToBeReplaced; i--) {

                System.out.println("" + att.charAt(i - 1));
                buff[i - 1] = '*';
                cont++;

            }
        } else {

            System.out.println("se sale del rango");

        }

        return String.valueOf(buff);

    }

    /**
     * This method count the repetitions of values in one column
     *
     * @param numArray the data set of the column
     * @return the number of different values
     */
    public static int diffValues(List<Object> numArray) {
        int numOfDifferentVals = 0;

        ArrayList<Object> diffNum = new ArrayList<>();

        for (Object item : numArray) {
            if (!diffNum.contains(item)) {
                diffNum.add(item);
            }
        }

        if (diffNum.size() == 1) {
            numOfDifferentVals = 0;
        } else {
            numOfDifferentVals = diffNum.size();
            diffNum.clear();
        }

        return numOfDifferentVals;
    }

    /**
     * This is an utility of the file chooser
     *
     * @class CSVFileFilter
     */
    class CSVFileFilter extends javax.swing.filechooser.FileFilter {

        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with ".csv" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith(".csv");
        }

        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            // hard-coded = ugly, should be done via I18N
            return "Archivos CSV (*.csv)";
        }
    }

    /**
     * This is an utility of the file chooser
     *
     * @class CSVFileFilter
     */
    class TXTFileFilter extends javax.swing.filechooser.FileFilter {

        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with ".csv" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith(".txt");
        }

        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            // hard-coded = ugly, should be done via I18N
            return "Archivos de texto (*.txt)";
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Open;
    private javax.swing.JButton jButton5;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
}
